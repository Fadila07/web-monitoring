<!-- jQuery -->
<script src="plugins/jquery/jquery.min.js"></script>
<!-- jQuery UI 1.11.4 -->
<script src="plugins/jquery-ui/jquery-ui.min.js"></script>
<!-- Resolve conflict in jQuery UI tooltip with Bootstrap tooltip -->
<script>
  $.widget.bridge('uibutton', $.ui.button)
</script>
<!-- Bootstrap 4 -->
<script src="plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
<!-- ChartJS -->
<script src="plugins/chart.js/Chart.min.js"></script>
<!-- Sparkline -->
<script src="plugins/sparklines/sparkline.js"></script>
<!-- JQVMap -->
<script src="plugins/jqvmap/jquery.vmap.min.js"></script>
<script src="plugins/jqvmap/maps/jquery.vmap.usa.js"></script>
<!-- jQuery Knob Chart -->
<script src="plugins/jquery-knob/jquery.knob.min.js"></script>
<!-- Select2 -->
<script src="plugins/select2/js/select2.full.min.js"></script>
<!-- Bootstrap4 Duallistbox -->
<script src="plugins/bootstrap4-duallistbox/jquery.bootstrap-duallistbox.min.js"></script>
<!-- InputMask -->
<script src="plugins/moment/moment.min.js"></script>
<script src="plugins/inputmask/min/jquery.inputmask.bundle.min.js"></script>
<!-- date-range-picker -->
<script src="plugins/daterangepicker/daterangepicker.js"></script>
<!-- bootstrap color picker -->
<script src="plugins/bootstrap-colorpicker/js/bootstrap-colorpicker.min.js"></script>
<!-- Tempusdominus Bootstrap 4 -->
<script src="plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js"></script>
<!-- Summernote -->
<script src="plugins/summernote/summernote-bs4.min.js"></script>
<!-- Bootstrap Switch -->
<script src="plugins/bootstrap-switch/js/bootstrap-switch.min.js"></script>
<!-- overlayScrollbars -->
<script src="plugins/overlayScrollbars/js/jquery.overlayScrollbars.min.js"></script>
<!-- AdminLTE App -->
<script src="dist/js/adminlte.js"></script>
<!-- AdminLTE dashboard demo (This is only for demo purposes) -->
<script src="dist/js/pages/dashboard.js"></script>
<!-- AdminLTE for demo purposes -->
<script src="dist/js/demo.js"></script>
<script>
    $("input[data-bootstrap-switch]").each(function(){
      $(this).bootstrapSwitch('state', $(this).prop('checked'));
    });
</script>

<script type="text/javascript">
    function showTime() {
        var a_p = "";
        var today = new Date();
        var curr_hour = today.getHours();
        var curr_minute = today.getMinutes();
        var curr_second = today.getSeconds();
        if (curr_hour < 12) {
            a_p = "AM";
        } else {
            a_p = "PM";
        }
        if (curr_hour == 0) {
            curr_hour = 12;
        }
        if (curr_hour > 12) {
            curr_hour = curr_hour - 12;
        }
        curr_hour = checkTime(curr_hour);
        curr_minute = checkTime(curr_minute);
        curr_second = checkTime(curr_second);
        document.getElementById('time').innerHTML=curr_hour + ":" + curr_minute + ":" + curr_second + " " + a_p;
    }
             
    function checkTime(i) {
        if (i < 10) {
            i = "0" + i;
        }
        return i;
    }
    setInterval(showTime, 500);         
</script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/paho-mqtt/1.0.2/mqttws31.min.js" type="text/javascript"></script>
<script type="text/javascript">
        const MQTTbroker = '54.160.244.208';
        var messagePayloadTemperature = 0;
        var messagePayloadHumidity = 0;
        var messagePayloadMoisture = 0;
       
        // var client = new Paho.MQTT.Client(MQTTbroker, MQTTport,
        //             "myclientid_" + parseInt(Math.random() * 100, 10));
        var client = new Paho.MQTT.Client(MQTTbroker, 9095, "myclientid_")
        // var cl = new Paho.MQTT.Client(MQTTbroker, 1883, "myclientid_");
        client.onMessageArrived = onMessageArrived;
        client.onConnectionLost = onConnectionLost;
        //connect to broker is at the bottom of the init() function !!!!
        
        //mqtt connecton options including the mqtt broker subscriptions
        client.connect({
            onSuccess: function () {
                console.log("mqtt connected");
                // Connection succeeded; subscribe to our topics
                // client.subscribe(MQTTsubTopic, {qos: 1});
                client.subscribe("sawi/iot/temperature");
                client.subscribe("sawi/iot/humidity");
                client.subscribe("sawi/iot/moisture");
                client.subscribe("sawi/iot/mac");
                client.subscribe("esp/manual");
            },
            onFailure: function (message) {
                console.log("Connection failed, ERROR: " + message.errorMessage);
                //window.setTimeout(location.reload(),20000); //wait 20seconds before trying to connect again.
            }
        });

        function onConnectionLost(responseObject) {
            console.log("connection lost: " + responseObject.errorMessage);
            //window.setTimeout(location.reload(),20000); //wait 20seconds before trying to connect again.
        };

        function onMessageArrived(message) {
            console.log(message.destinationName, '',message.payloadString);
            // session_start();

            if(message.destinationName  == "sawi/iot/temperature"){
                console.log("Message Arrived: " + message.payloadString);
                document.getElementById("temperature").innerHTML = '<span>' +message.payloadString +' </span>';
                messagePayloadTemperature = parseInt(message.payloadString);
                // $_SESSION["temperature"] = messagePayloadTemperature;
                
                console.log("Temperature: " +messagePayloadTemperature);
            } if(message.destinationName == "sawi/iot/humidity"){
                console.log("Message Arrived: " + message.payloadString);
                document.getElementById("humidity").innerHTML = '<span>' +message.payloadString +' </span>';
                messagePayloadHumidity = parseInt(message.payloadString);
                console.log("Humidity: " +messagePayloadHumidity);
            } if(message.destinationName == "sawi/iot/moisture"){
                console.log("Message Arrived: " + message.payloadString);
                document.getElementById("moisture").innerHTML = '<span>' +message.payloadString +' </span>';
                messagePayloadMoisture = parseFloat(message.payloadString);
                console.log("Moisture: " +messagePayloadMoisture);
            }
            
        };

        function publishToMQTT(message) {
            message = new Paho.MQTT.Message(message ? "1" : "0");
            message.destinationName = "esp/manual";
            client.send(message);
        }

        function starttoConnect(){
            
        }

        $(document).ready(function () {
            $("#manualBtn").bootstrapSwitch();

            $('#manualBtn').on('switchChange.bootstrapSwitch', function (event, state) {
                publishToMQTT(state);
            });
        });

    function refreshTemperature(chart){
        chart.config.data.datasets.forEach(function (dataset){
            dataset.data.push({
                x: Date.now(),
                y: messagePayloadTemperature
            });
        });
    }

        function onrefreshHum(chart){
            chart.config.data.datasets.forEach(function (dataset){
                dataset.data.push({
                    x: Date.now(),
                    y: messagePayloadHumidity
                })
            });
        }

        function onrefreshMois(chart){
            chart.config.data.datasets.forEach(function (dataset){
                dataset.data.push({
                    x: Date.now(),
                    y: messagePayloadMoisture
                })
            });
        }

        // var dataTemp = {
        //     data: messagePayloadTemperature,
        //     lineTension: 0,
        //     fill: false,
        //     borderColor: 'blue'
        // };
        
        var chartColors = {
            red: 'rgb(255, 99, 132)',
            orange: 'rgb(255, 159, 64)',
            yellow: 'rgb(255, 205, 86)',
            green: 'rgb(75, 192, 192)',
            blue: 'rgb(54, 162, 235)',
            purple: 'rgb(153, 102, 255)',
            grey: 'rgb(201, 203, 207)'
        };
        var color = Chart.helpers.color;
        var configTemperature = {
            type: 'line',
            data: {
                datasets: [{
                    label: 'Temperature',
			        backgroundColor: color(chartColors.red).alpha(0.5).rgbString(),
                    borderColor: chartColors.red,
                    fill: false,
                    lineTension: 0,
                    borderDash: [8, 4],
                    data: []
                }]
            },
            options: {
                title: {
                    display: true,
                    text: "Temperature"
                },
                scales: {
                    xAxes: [{
                        type: 'realtime',
                        realtime: {
                            duration: 20000,
                            refresh: 2000,
                            delay: 3000,
                            onRefresh: refreshTemperature
                        }
                    }],
                    yAxis: [{
                        title: {
                            display: true,
                            text: 'Value'
                        }
                    }]
                },
                tooltips: {
                    mode: 'nearest',
                    intersect: false
                },
                hover: {
                    mode: 'nearest',
                    intersect: false
                }
            }
        };

        window.onload = function() {
            var ctx = document.getElementById('ChartTemperature').getContext('2d');
            window.ChartTemperature = new Chart(ctx, configTemperature);
        };

        // var lineChart = new Chart(tempChart, {
        //     type: 'line',
        //     data: dataTemp,
        //     options: chartOptions
        // });
        
</script>